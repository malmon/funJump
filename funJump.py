'''
Created on Mar 21, 2015

@author: Mike Almon

basic platform jumper to play around with pygame.  Created with python 2.7 and pygame

'''

import pygame
import random


''' Color Palette'''
BLACK = (0,0,0)
WHITE = (255, 255, 255)
BACKGROUND = [0,0,255]
PLATFORMCOLOR = (70,150,70)
PLAYERCOLOR = (244,90,32)

'''Screen Size'''
screen_width = 800
screen_height = 600


'''Player's sprite'''
class Player(pygame.sprite.Sprite):
    #constructor
    def __init__(self, start_x, start_y):
        super(Player, self).__init__()
        
        #define sprite display
        width = 40
        height = 60
        self.image = pygame.Surface([width, height])
        self.image.fill(PLAYERCOLOR)
        
        self.rect = self.image.get_rect()
        
        #distance in pixels and direction of x and y position of the player 
        self.change_x = 0
        self.change_y = 0
        
        #set the start position of player, generated by the main function
        self.rect.x = start_x
        self.rect.y = start_y
        
        #reference to level class
        self.level = None
    
    #run update at the end of every frame to relocate the player and collision checks
    def update(self):
        #calculate out effects of falling
        self.calc_grav()
        
        #change the player position based on user input and the speed of the level
        self.rect.x += self.change_x - self.level.speed
        
        #check for collisions if the player has hit the left or right side of any platforms
        block_hit_list = pygame.sprite.spritecollide(self, self.level.platform_list, False)
        for block in block_hit_list:
            
            if self.rect.left >= block.rect.left and self.rect.right >= block.rect.left:
                self.rect.left = block.rect.right
            elif self.rect.left <= block.rect.left and self.rect.right >= block.rect.left:
                self.rect.right = block.rect.left
                
        #update the player position based on user input and gravity
        self.rect.y += self.change_y
        
        #check of collisions if the player has hit the top or bottom of a platform
        block_hit_list = pygame.sprite.spritecollide(self, self.level.platform_list, False)
        
        for block in block_hit_list:
            if self.change_y > 0:
                self.rect.bottom = block.rect.top
            elif self.change_y < 0:
                self.rect.top = block.rect.bottom
                
            self.change_y = 0
            
    def calc_grav(self):
        #calculate the effect of gravity on the player
        if self.change_y == 0:
            self.change_y = 1
        else:
            self.change_y += .35
            
        if self.rect.y >= screen_height - self.rect.height and self.change_y >= 0:
            self.change_y = 0
            self.rect.y = screen_height -self.rect.height
    
    def jump(self):
        #player move up
        self.rect.y += 2
        platform_hit_list = pygame.sprite.spritecollide(self, self.level.platform_list, False)
        self.rect.y -= 2
        
        if len(platform_hit_list) > 0 or self.rect.bottom >= screen_height:
            self.change_y = -10
    
    def go_left(self):
        #player move left
        self.change_x = -6
    
    def go_right(self):
        #player move right and adjust for the speed of the level
        self.change_x = 6 + self.level.speed
    
    def stop(self):
        #stop player movement when no key press
        self.change_x = 0
        
    def drop(self):
        #speed up falling in the player presses down
        self.change_y = + 10
        
'''Platform Sprite'''
class Platform(pygame.sprite.Sprite):
    
    #create the platform sprite
    def __init__(self, width, height, x):
        super(Platform, self).__init__()
        self.image = pygame.Surface([width, 10])
        self.image.fill(PLATFORMCOLOR)
        self.rect = self.image.get_rect()
        self.rect.y = height + 10
        self.rect.x = x
    
    #update the platform based on the speed of the world
    def update(self, shift):
        self.rect.x -= shift

'''Score Box'''
class ScoreBox():
    
    def __init__(self):
        self.font = pygame.font.SysFont("comicsansms", 32)

    def draw(self, score, screen):
        score_text = "Score: " + str(score)
        message_box = self.font.render(score_text, True, WHITE)
        message_box_pos = message_box.get_rect()
        screen.blit(message_box, message_box_pos)
 
'''The main Level'''       
class Level():
    #list of platforms
    platform_list = None
    
    #constructor
    def __init__(self, player):
        #list of all the platforms
        self.platform_list = pygame.sprite.Group()
        
        #reference to the player sprite
        self.player = player
        
        #gap between platforms
        self.gap = 100
        
        #speed at with the world is moving
        self.speed = 1
        
        #create and fill the initial start with enough random platforms to fill the screen
        widthTotal = 0
        self.height = random.randint(screen_height-400, screen_height)
        while widthTotal < screen_width:
            width = random.randint(40, 200)
            platform = Platform(width, self.height, widthTotal)
            platform.player = self.player
            self.platform_list.add(platform)
            widthTotal += width + self.gap
            self.setHeight()
        
        #figure out when to create the next platform
        self.gapRemander = self.gap - (widthTotal - screen_width)
    
    #create a new platform
    def makePlatform(self, width):
        self.setHeight()
        platform = Platform(width, self.height, screen_width)
        platform.player = self.player
        return platform
     
    #update all of the platforms   
    def update(self):
        #go though platform list and destroy any that have fall off the the left side of the screen 
        for platform in self.platform_list:
            if platform.rect.right < 0:
                self.platform_list.remove(platform)
         
        #check if there is enough space to create a new platform   
        if self.gapRemander >= self.gap:
            width = random.randint(40, 200)
            newplatform = self.makePlatform(width)
            self.platform_list.add(newplatform)
            self.gapRemander = -width
        else:
            self.gapRemander += self.speed   
        
        #update the position of all the platforms
        self.platform_list.update(self.speed)
    
    #Draw out the platform    
    def draw(self, screen):
        #draw the background color
        screen.fill(BACKGROUND)
        
        #draw the platforms
        self.platform_list.draw(screen)
    
    #set the height of the next platform and make sure it is reachable and in the screen
    def setHeight(self):
        new_height = 0
        while new_height < 20 or new_height > screen_height - 20:
            new_height = random.randint(self.height-100, self.height + 100)
        self.height  = new_height        

'''main function to run it all'''                
def main():
    #number of levels    
    level_number = 100
    
    #number of frames between levels
    level_time = 300
    
    #how much to steps the blue and red in the background
    level_bg_change = round(255/level_number)
    
    #players score
    score = 0
    
    #initialize pygame
    pygame.init()
    
    #create display
    size = [screen_width, screen_height]
    screen = pygame.display.set_mode(size)
    
    #update window title
    pygame.display.set_caption("Fun Jump")
    
    #get random player starting position
    start_y = random.randint(1 , 10)
    start_x = random.randint(100, 400)
    
    #create the player
    player = Player(round(start_x/2), start_y)
    
    #create level
    current_level = Level(player)
    player.level = current_level
    
    #add play to list of active sprites
    active_sprite_list = pygame.sprite.Group()
    active_sprite_list.add(player)
    
    #flag to break game loop
    done = False
    
    #pygame clock
    clock = pygame.time.Clock()
    
    #create counter to keep track of level progress
    count = 0
    
    sc_box = ScoreBox()
    
    #main game loop
    while not done:
                
        for event in pygame.event.get():
            #if player closes window exit program
            if event.type == pygame.QUIT:
                done = True
                
            #if player interacts with the keyboard
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT:
                    player.go_left()
                if event.key == pygame.K_RIGHT:
                    player.go_right()
                if event.key == pygame.K_UP:
                    player.jump()
                if event.key == pygame.K_DOWN:
                    player.drop()
                
            if event.type == pygame.KEYUP:
                if event.key == pygame.K_LEFT and player.change_x < 0:
                    player.stop()
                if event.key == pygame.K_RIGHT and player.change_x > 0:
                    player.stop()
                    
        #check if it is time to level player up
        if current_level.speed < level_number:
            #if time to level up increase speed and shift background from blue to red
            if count == level_time:
                count = 0
                current_level.speed += 1
                BACKGROUND[0] += level_bg_change
                BACKGROUND[2] -= level_bg_change
            else:
                count += 1
        
        #update the level and player positions        
        active_sprite_list.update()      
        current_level.update()
        
        #contain the player stays within the screen
        
        if player.rect.right > screen_width:
            player.rect.right = screen_width
        
        #end game if player touched the bottom or left the screen  
        if player.rect.bottom >= screen_height:
            player.rect.bottom = screen_height
            done = True
        if player.rect.left < 0:
            player.rect.left = 0
            done = True
        
        #give the player points
        score += current_level.speed * 3
                
        #draw the changes
        current_level.draw(screen)
        active_sprite_list.draw(screen)
        sc_box.draw(score, screen)
        
        #set the frame rate to 60
        clock.tick(60)
        
        #update the display with all of the changes
        pygame.display.flip()
    #exit out of the program    
    pygame.quit()

if __name__ == "__main__":
    main()